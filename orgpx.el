(defcustom orgpx-directory
  (concat user-emacs-directory "orgpx/")
  "Directory in which auxiliar files generated by orgpx are
  located by default.")

;; TODO: create only if it was not set before
(mkdir orgpx-directory t)


(defcustom orgpx-last-sync-snapshot
  (concat orgpx-directory "last-sync.gpx")
  "TODO. Location of the gpx file that contains a snapshot of the last
  imported or exported gpx file. It is used to know which
  waypoints were added or deleted on the org-mode side. If it
  does not exists, no changes are assumed since last sync.")


(defcustom orgpx-entry-tag "orgpx"
  "Tag used to specify that an entry is a location to
  be kept in sync with orgpx.")

(defcustom orgpx-entry-property "ORGPX"
  "TODO. Property used to specify that an entry is a location to
  be kept in sync with orgpx.")

(defcustom orgpx-use-tag-on-import t
  "TODO. Whether to use a tag (non-nil), a property (nil), or
  both ('both) to specify that an imported entry is a represents
  a location.")


;;;;;;; Importing from gpx file

(defcustom orgpx-imported-file nil
  "Location of the gpx file to be imported and shynchronized with
  org-mode. It can be a function that returns the file
  location (and optionally creates it).")

;; TODO: find it in telegram
(defun orgpx-get-imported-file-telega ()
  "TODO. Downloads from Telegram, using telega, the gpx file to
be imported by orgpx."
  (error "Not implemented yet"))

(defcustom orgpx-default-locations-file
  (concat org-directory "orgpx.org")
  "Default org file in which to store new location entries
  imported from a gpx file. A string with the file name, or the
  symbols 'ask (TODO), 'refile (TODO), or 'smart (TODO), to ask
  each time for a file, refile each entry interactively, or let
  orgpx try to be smart guessing which file should it be for each
  location, inferring it from existing location entries.")


(defun orgpx-parse-gpx-file (file)
  "Given a gpx file, returns the list of the waypoints it
encodes. Each element of the list is an alist"
  (save-window-excursion
    (find-file file)
    (let ((gpx (car (xml-parse-region (point-min) (point-max)))))
      (mapcar
       (lambda (wpt)
         (list
          (cons :lat (xml-get-attribute wpt 'lat))
          (cons :lon (xml-get-attribute wpt 'lon))
          (cons :name (nth 2 (car (xml-get-children wpt 'name))))
          (cons :tag (nth 2 (car (xml-get-children wpt 'type))))))
       (xml-get-children gpx 'wpt)))))


(defun orgpx-wpt-to-org-entry (wpt)
  "Given an alist representing a waypoint, captures an org entry
with that waypoint information. The location of the captured
entry is decided according to orgpx-default-locations-file."
  (setq tmp-wpt wpt)  ;; Use a closure for orgpx-set-properties instead?
  (add-hook 'org-capture-before-finalize-hook 'orgpx-set-properties)
  (let ((org-capture-templates
         `(("d" "Waypoint" entry
            (file+headline ,orgpx-default-locations-file "Locations")
            ,(concat "* " (alist-get :name wpt) "\n" (alist-get :description wpt))
            :kill-buffer t
            ;; :refile-targets
            :immediate-finish t))))
    (org-capture nil "d"))
  (remove-hook 'org-capture-before-finalize-hook 'orgpx-set-properties))

(defun orgpx-set-properties ()
  (org-set-property "LATITUDE" (alist-get :lat tmp-wpt))
  (org-set-property "LONGITUDE" (alist-get :lat tmp-wpt))
  (org-set-tags (list orgpx-entry-tag (orgpx-tagify (alist-get :tag tmp-wpt)))))

(defun orgpx-tagify (string)
  (s-replace " " "_" string))


(defun orgpx-import ()
  "Created new orgpx entries from a gpx file."
  (mapcar
   'orgpx-wpt-to-org-entry
   (orgpx-parse-gpx-file orgpx-imported-file)))


;;;; Collecting waypoints from org files

(defcustom orgpx-files '(agenda)
  "Files in which orgpx should look for locations to export to
  gpx or synchronize with a gpx file. It should be a value or a
  list of values, where the accepted values are file names, the
  symbol 'agenda (which will be expanded to the list of
  org-agenda files) or functions that return a list of file
  names.")

(defcustom orgpx-exported-file nil
  "Location where the exported gpx file should be saved. It can
  be a function of arity 0 or 1, receiving in the later case the
  buffer with the gpx content that it's going to be saved, and
  which returns the file name where the buffer should be saved or
  nil for not saving to a file.")


(defun orgpx-export ()
  "Collect all waypoint entries from relevant org files and
export them to a gpx file"
  (save-window-excursion
    (switch-to-buffer (generate-new-buffer "orgpx-export"))
    (xml-mode)
    ;; Write gpx file header
    (insert
     (concat
      ;; Just copied verbatim the header of the gpx file exported by
      ;; OsmAnd in my phone
      "<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>\n"
      "<gpx version=\"1.1\" creator=\"OsmAnd~ 4.0.9\" xmlns=\"http://www.topografix.com/GPX/1/1\" xmlns:osmand=\"https://osmand.net\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd\">\n"
      "  <metadata>\n"
      "    <name>favourites</name>\n"
      "  </metadata>\n"))
    ;; Write each waypoint field
    ;; For file in (location-files)
    (org-map-entries
     ;; For entry in file
     (lambda ()
       (let ((name (org-entry-get (point) "ITEM"))
             (lat (org-entry-get (point) "LATITUDE"))
             (lon (org-entry-get (point) "LONGITUDE"))
             (type (car (reverse (org-get-tags)))) ;; TODO
             (desc (org-entry-get (point) "TODO")))
         (with-current-buffer "orgpx-export"
           (insert
            (concat
             (format "<wpt lat=\"%s\" lon=\"%s\">\n" lat lon)
             (format "<name>%s</name>\n" name)
             (format "<type>%s</type>\n" type) ;; TODO: untagify
             "</wpt>\n")))))
     ;;
     (concat "+" orgpx-entry-tag) (orgpx-location-files) 'archive 'comment)
    ;; Finalize
    (goto-char (point-max))
    (insert "</gpx>")
    (indent-region (point-min) (point-max))
    ;; TODO: handle buffer for saving
    (let ((file (cond ((stringp orgpx-exported-file) orgpx-exported-file)
                      ((eq (cdr (func-arity orgpx-exported-file)) 0)
                       (funcall orgpx-exported-file))
                      (t (funcall orgpx-exported-file) (current-buffer)))))
      (when file (write-file file)))
    (kill-current-buffer)))

(defun orgpx-location-files ()
  "Return the list of org-files in which to look for waypoint entries"
  (flatten-list
   (mapcar
    (lambda (elem)
      (pcase elem
        ((pred stringp) elem)
        ('agenda (org-agenda-files))
        (_ (funcall elem))))
    (if (and (listp orgpx-files) (not (eq (car orgpx-files) 'lambda)))
        orgpx-files
      (list orgpx-files)))))


(provide 'orgpx)
