(defcustom orgpx-directory
  (concat user-emacs-directory "orgpx/")
  "Directory in which auxiliar files generated by orgpx are
  located by default.")

;; TODO: create only if it was not set before
(mkdir orgpx-directory t)


(defcustom orgpx-last-sync-snapshot
  (concat orgpx-directory "last-sync.gpx")
  "TODO. Location of the gpx file that contains a snapshot of the last
  imported or exported gpx file. It is used to know which
  waypoints were added or deleted on the org-mode side. If it
  does not exists, no changes are assumed since last sync.")


(defcustom orgpx-entry-tag "orgpx"
  "Tag used to specify that an entry is a location to
  be kept in sync with orgpx.")

(defcustom orgpx-entry-property "ORGPX"
  "TODO. Property used to specify that an entry is a location to
  be kept in sync with orgpx.")

(defcustom orgpx-use-tag-on-import t
  "TODO. Whether to use a tag (non-nil), a property (nil), or
  both ('both) to specify that an imported entry is a represents
  a location.")


;;;;;;; Importing from gpx file

(defcustom orgpx-imported-file nil
  "Location of the gpx file to be imported and shynchronized with
  org-mode. It can be a function that returns the file
  location (and optionally creates it).")

;; TODO: find it in telegram
(defun orgpx-get-imported-file-telega ()
  "TODO. Downloads from Telegram, using telega, the gpx file to
be imported by orgpx."
  (error "Not implemented yet"))

(defcustom orgpx-default-locations-file
  (concat org-directory "orgpx.org")
  "Default org file in which to store new location entries
  imported from a gpx file. A string with the file name, or the
  symbols 'ask (TODO), 'refile (TODO), or 'smart (TODO), to ask
  each time for a file, refile each entry interactively, or let
  orgpx try to be smart guessing which file should it be for each
  location, inferring it from existing location entries.")


(defun orgpx-parse-gpx-file (file)
  "Given a gpx file, returns the list of the waypoints it
encodes. Each element of the list is an alist"
  (save-window-excursion
    (find-file file)
    (let ((gpx (car (xml-parse-region (point-min) (point-max)))))
      (mapcar
       (lambda (wpt)
         (list
          (cons :lat (xml-get-attribute wpt 'lat))
          (cons :lon (xml-get-attribute wpt 'lon))
          (cons :name (nth 2 (car (xml-get-children wpt 'name))))
          (cons :tag (nth 2 (car (xml-get-children wpt 'type))))))
       (xml-get-children gpx 'wpt)))))


(defun orgpx-wpt-to-org-entry (wpt)
  "Given an alist representing a waypoint, captures an org entry
with that waypoint information. The location of the captured
entry is decided according to orgpx-default-locations-file."
  (setq tmp-wpt wpt)  ;; Use a closure for orgpx-set-properties instead?
  (add-hook 'org-capture-before-finalize-hook 'orgpx-set-properties)
  (let ((org-capture-templates
         `(("d" "Waypoint" entry
            (file+headline ,orgpx-default-locations-file "Locations")
            ,(concat "* " (alist-get :name wpt) "\n" (alist-get :description wpt))
            :kill-buffer t
            ;; :refile-targets
            :immediate-finish t))))
    (org-capture nil "d"))
  (remove-hook 'org-capture-before-finalize-hook 'orgpx-set-properties))

(defun orgpx-set-properties ()
  (org-set-property "LATITUDE" (alist-get :lat tmp-wpt))
  (org-set-property "LONGITUDE" (alist-get :lat tmp-wpt))
  (org-set-tags (list orgpx-entry-tag (orgpx-tagify (alist-get :tag tmp-wpt)))))

(defun orgpx-tagify (string)
  (s-replace " " "_" string))


(defun orgpx-import ()
  "Created new orgpx entries from a gpx file."
  (mapcar
   'orgpx-wpt-to-org-entry
   (orgpx-parse-gpx-file orgpx-imported-file)))

(provide 'orgpx)
